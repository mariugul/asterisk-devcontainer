[general]


[globals]
Windows_DeskPhone=PJSIP/0000f30A0A01
Windows_DeskPhone2=PJSIP/0000f30B0B02
Huawei_SoftPhone=PJSIP/SOFTPHONE_A
UserB_SoftPhone=PJSIP/SOFTPHONE_B
Samsung_S20=PJSIP/SAMSUNG_S20
Samsung_Tab=PJSIP/SAMSUNG_S5_TAB

QUEUE_TIMEOUT=15
DIRECT_DIAL_TIMEOUT=30

[sets]

; Simple dial etensions
exten =>  100,1,Gosub(subDial,Dial,1(${Windows_DeskPhone}))

exten => 101,1,Progress()
  same => n,Gosub(subDial,Dial,1(${Huawei_SoftPhone}))

exten => 102,1,Progress()
  same => n,Gosub(subDial,Dial,1(${Windows_DeskPhone2}))   

exten => 103,1,Progress()
  same => n,Gosub(subDial,Dial,1(${UserB_SoftPhone}))

exten => 104,1,Progress()
  same => n,Gosub(subDial,Dial,1(${Samsung_S20}))

exten => 105,1,Progress()
  same => n,Gosub(subDial,Dial,1(${Samsung_Tab}))

; Call All Phones 
exten => 110,1,Dial(${Windows_DeskPhone2}&${Huawei_SoftPhone}&${UserB_SoftPhone})

; Direct Dial
exten => subDirectDial,1,NoOp(Direct Dialing)
  same => n,Set(device=${ARG1})
  same => n,GotoIf($["${DEVICE_STATE(${device})}" = "INUSE"]?busy:dial)
  
  same => n(dial),Dial(${device}, 30)
  same => n,GotoIf($["${DEVICE_STATE(${device})}" = "INUSE"]?busy:)  

  same => n(unavailable),Playback(vm-nobodyavail)
  same => n,Hangup()

  same => n(busy),Playback(is-curntly-busy)
  same => n,PlayTones(busy)
  same => n,WaitExten(5)
  same => n,Goto(1)

; Call Menu
exten => 201,1,Goto(TestMenu, start, 1)

; Call to Queue 'Sales'
exten => 610,1,Progress()
 
  ; Play ringtone sound
  same => n,Ringing()

  ; Set variables
  same => n,Set(SHARED(QUEUEDCHAN)=${{CHANNEL}})
  same => n,Set(__Queuechanid=${{CHANNEL}})	
  same => n,Set(queueId=sales)		
  same => n,Set(dirno=610)								
  same => n,Set(priority=1)	  
  same => n,Set(timeout=10)
  same => n,Set(timeoutForwardNr="")
  same => n,Set(cfu=true) ;cfu=Call Forwarding Unconditional
  same => n,Set(cfuNr=102)			
  
  ; Check for Unconditional Forwarding
  same => n,GotoIf($["${cfu}" = "true"]?:queue)
  same => n,Playback(silence/1)              ; Silence for a more pleasant experience
  same => n,Playback(call-fwd-unconditional) ; Inform caller of what's happening
  same => n,Goto(${cfuNr}, 1)                ; Forward call

  ; If timeout=0 the queue is called with a timeout of 
  ; 21 600 seconds (6hrs), to simulate calling the queue "indefinetely".
  same => n(queue),Queue(${queueId},,,,${IF($[${timeout} = 0]?21600:${timeout})})  

  ; Forward call if forward nr exists
  same => n,GotoIf($[${timeoutForwardNr} != ""]?:hangup) ; Hangup if no timeoutForwardNr defined
  same => n,Goto(${timeoutForwardNr},1)                  ; Forward call to any extension		
  
  same => n,Hangup()

; Call to Queue 'Support
exten => 611,1,Noop()
  same => n,Progress()
  same => n,Queue(support,,,,${QUEUE_TIMEOUT})
  same => n,Set(ForwardQueueOnTimeout=support-priority)
  same => n,Hangup()

; Call to Queue 'support-priority'
exten => 612,1,Noop()i
  same => n,Progress()
  same => n,Queue(support-priority,,,,${QUEUE_TIMEOUT})
  same => n,Hangup()

; Log in queue member
exten => *732,1,Verbose(2,Logging In Queue Member)
  same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
  same => n,AddQueueMember(support,${MemberChannel})
  same => n,AddQueueMember(support-priority,${MemberChannel})
  same => n,AddQueueMember(sales,${MemberChannel})
  same => n,Verbose(1,MemberChannel=${MemberChannel}) ; Print for debug
  same => n,Verbose(1,${AQMSTATUS}) ; ADDED, MEMBERALREADY, NOSUCHQUEUE
  same => n,Playback(agent-loginok)
  same => n,Hangup()

; Log out queue member
exten => *733,1,Verbose(2,Logging Out Queue Member)
  same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
  same => n,RemoveQueueMember(support,${MemberChannel})
  same => n,Verbose(1,${RQMSTATUS}) ; REMOVED, NOTINQUEUE, NOSUCHQUEUE
  same => n,RemoveQueueMember(support-priority,${MemberChanne})
  same => n,RemoveQueueMember(sales,${MemberChannel})
  same => n,Playback(agent-loggedoff)
  same => n,Hangup()

; Pause queue member
exten => *734,1,Verbose(2,Pause Queue Member)
  same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
  same => n,PauseQueueMember(support,${MemberChannel})
  same => n,Verbose(1,${PQMSTATUS}) ; PAUSED, NOTFOUND
  same => n,Playback(dictate/paused)
  same => n,Hangup()

; Unpause queue member
exten => *735,1,Verbose(2,Unpause Queue Member)
  same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
  same => n,UnpauseQueueMember(support,${MemberChannel})
  same => n,Verbose(1,${UPQMSTATUS}) ; UNPAUSED, NOTFOUND
  same => n,Playback(agent-loginok)
  same => n,Hangup()

; Activate Call Forward Unconditional
; Currently this is just taken from an example code
exten => *61,1,Playback(hello)
  same => n,Playback(vm-enter-num-to-call)
  same => n,Read(cfwd)
  same => n,Playback(beep)
  same => n,Set(DB(REDIRECT/${CALLERID(num)})=${cfwd})
  same => n,Set(DB(REDIRTIMER/TIMER)=10)
  same => n,Playback(you-entered)
  same => n,SayDigits(${DB(REDIRECT/${CALLERID(num))}})
  same => n,Playback(enabled)
 
; Deactivate Call Forward Unconditional
; Currently this is just taken from an example code
exten => *21,1,Set(NOREDIRNUM=${DB_DELETE(REDIRECT/${CALLERID(num)})})
  same => n,Playback(disabled)
     
exten => 321,1,NoOp()
  same => n,Answer()
  same => n,Set(COUNT=3)
  same => n,Set(NEWCOUNT=$[${COUNT} + 1])
  same => n,SayNumber(${NEWCOUNT})

; Error Handling -> Hangs up if invalid extension is entered
exten => _X.,1,Playback(pbx-invalid)
  same => n,Hangup()   

; Dials a device directly with busy-checking
[subDial]
exten => Dial,1,Progress()
  
  ; Device to call
  same => n,Set(device=${ARG1})
  
  ; Check busy-state
  same => n(isBusy),Gosub(subCalleeIsBusy,isBusy,1(${device}))
  same => n,Set(isBusy=${GOSUB_RETVAL})
  
  ; Check unavailable-state
  same => n,Gosub(subCalleeIsUnavailable,isUnavailable,1(${device}))
  same => n,Set(isUnavailable=${GOSUB_RETVAL}) 

  ; Play 'busy tone' if device is busy
  same => n,GotoIf($["${isBusy}" = "false"]?:busy)

  ; Play 'unavailable' and hangup if device is unavailable
  same => n,GotoIf($["${isUnavailable}" = "false"]?:unavailable)

  ; Dial device for 'timeout' seconds. 
  same => n(dial),Dial(${device}, ${DIRECT_DIAL_TIMEOUT})  

  ; Check dialstatus, this is different from device state as it 
  ; gives the state of what happened in the Dial() function.
  ; This has to be done after Dial(), because the DIALSTATUS is never reset without Dial().
  same => n,GotoIf($["${DIALSTATUS}" != "BUSY"]?:busy) 

  ; Check device state after Dial-timeout
  same => n,Goto(isBusy)
  
  ; Play 'busy tone' and check device state again every 'x' seconds
  ; Never hangs up as long as the device is busy
  same => n(busy),Playback(silence/1)
  same => n,Playback(is-curntly-busy)
  same => n,Playback(silence/1)
  same => n,PlayTones(busy)
  same => n,WaitExten(10)
  same => n,Goto(isBusy)

  ; On Unavailable device, hangup the call 
  same => n(unavailable),Playback(silence/1) ; Silence makes the call more enjoyable
  same => n,Playback(vm-nobodyavail)
  same => n,Playback(silence/1)
  same => n,Hangup()


[subCalleeIsBusy]
exten => isBusy,1,NoOp(Check if the callee is in another call)
  
  ; Device state to check
  same => n,Set(device=${ARG1})
  
  ; Is device "INUSE" or "BUSY"?
  same => n,Set(isInUse=${IF($["${DEVICE_STATE(${device})}" = "INUSE"]?true:false)})
  same => n,Set(isBusy=${IF($["${DEVICE_STATE(${device})}" = "BUSY"]?true:false)})
  
  ; Doesn't differentiate between "INUSE" and "BUSY", both return as "BUSY"
  same => n,Set(deviceState=${IF($["${isInUse}" = "true" | "${isBusy}" = "true"]?true:false)})
  
  ; Return true: callee is busy
  same => n,Return(${deviceState})

[subCalleeIsUnavailable]
exten => isUnavailable,1,NoOp(Checks if the callee is unavailable)
  same => n,Set(device=${ARG1})
  same => n,Set(isUnavailable=${IF($["${DEVICE_STATE(${device})}" = "UNAVAILABLE"]?true:false)})
  same => n,Return(${isUnavailable})

[TestMenu]
exten => start,1,Answer()
   same => n,Background(enter-ext-of-person)
   same => n,WaitExten(10)

exten => 1,1,Dial(${Windows_DeskPhone},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 2,1,Dial(${Huawei_SoftPhone},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 3,1,Dial(${Windows_DeskPhone2},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 4,1,Dial(${UserB_SoftPhone},10)
   same => n,Playback(vm-nobodyavail)

exten => i,1,Playback(pbx-invalid)
   same => n,Goto(TestMenu,start,1)

exten => t,1,Playback(vm-goodbye)
   same => n,Hangup()   







